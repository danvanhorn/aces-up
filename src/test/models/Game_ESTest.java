/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 02 21:34:11 GMT 2017
 */

package models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import models.Card;
import models.Column;
import models.Deck;
import models.Game;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Game_ESTest extends Game_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Game game0 = new Game();
      game0.dealFour();
      // Undeclared exception!
      try { 
        game0.move(0, (-872));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Game game0 = new Game();
      game0.customDeal(48, 48, 3, 3);
      game0.dealFour();
      game0.remove(3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Game game0 = new Game();
      game0.customDeal(0, 0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Deck deck0 = new Deck();
      Game game0 = new Game("2fJ", deck0);
      // Undeclared exception!
      try { 
        game0.customDeal(0, 0, 0, 1970);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1970, Size: 49
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Game game0 = new Game();
      game0.customDeal(0, 10, 10, 10);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Game game0 = new Game("javax.xml.datatype.Duration#(getSet(DatatypeConstants.Field field)", (Deck) null);
      game0.errors = null;
      // Undeclared exception!
      try { 
        game0.remove((-2463));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("models.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Game game0 = new Game();
      // Undeclared exception!
      try { 
        game0.remove(24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 24, Size: 4
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Game game0 = new Game();
      // Undeclared exception!
      try { 
        game0.remove((-810));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = linkedList0.subList(0, 0);
      game0.errors = list0;
      linkedList0.add("q<:01zZk4oPnA");
      // Undeclared exception!
      try { 
        game0.move(0, 0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Deck deck0 = new Deck();
      Game game0 = new Game("hard", deck0);
      game0.columns = null;
      // Undeclared exception!
      try { 
        game0.move(84, 84);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Game game0 = new Game();
      // Undeclared exception!
      try { 
        game0.move(2094, 2094);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2094, Size: 4
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Game game0 = new Game((String) null, (Deck) null);
      // Undeclared exception!
      try { 
        game0.dealFour();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("models.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Deck deck0 = new Deck();
      Game game0 = new Game("?=8r2R@aA*Z", deck0);
      LinkedList<Column> linkedList0 = new LinkedList<Column>();
      game0.columns = (List<Column>) linkedList0;
      // Undeclared exception!
      try { 
        game0.dealFour();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Game game0 = new Game("^ BUs]Wa;", (Deck) null);
      // Undeclared exception!
      try { 
        game0.customDeal(3044, 3044, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("models.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Game game0 = new Game();
      // Undeclared exception!
      try { 
        game0.customDeal((-4692), (-2661), (-4692), (-2661));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Deck deck0 = new Deck();
      Game game0 = new Game("org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl", deck0);
      game0.errors = null;
      // Undeclared exception!
      try { 
        game0.clearErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("models.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Game game0 = new Game();
      game0.clearErrors();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Game game0 = new Game();
      game0.customDeal(7, 7, 3, 3);
      game0.remove(3);
      game0.remove(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Deck deck0 = new Deck();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      deck0.cards = (List<Card>) linkedList0;
      Game game0 = new Game("})@_D3", deck0);
      game0.dealFour();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Game game0 = new Game();
      game0.dealFour();
      game0.move(0, 0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Game game0 = new Game();
      game0.remove(0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Game game0 = new Game();
      game0.customDeal(48, 48, 3, 3);
      game0.remove(0);
  }
}
